# fill in 9 by 9 grid with values from a matrix, with zeros in the spaces meant to be blank
print("Please input a 9 by 9 matrix with zeroes in place of blank spaces following the form: [[0, 0, 0, 0, 0, 0, 9, 0, ], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]")
grid = input()
M = 9
# set up the intial matrix
def sudoku(a):
  for i in range(M):
    for j in range(M):
      print(a[i][j],end = "")
    print()

#initialize the solution with open possibilities
def solution(grid, row, col, n):
  for x in range(9):
    if grid[row][x] == n:
      return False
    if grid[x][col] == n:
      return False
  init_row = row - (row % 3)
  init_column = col - (col % 3)
  for i in range(3):
    for j in range(3):
      if grid[i + init_row][j + init_column] == n:
        return False
  return True
  
#continue through the grid if not at the end, filling in spaces with above function
def product(grid, row, col):
  if (row == (M - 1) and col == M):
    return True
  if col == M:
    row += 1
    col = 0
  if grid[row][col] > 0:
    return product(grid, row, col + 1)
  for n in range(1, M + 1, 1):
    if solution(grid, row, col, n):
      grid[row][col] = n
      if product(grid, row, col + 1):
        return True
    grid[row][col] = 0
  return False
if (product(grid, 0, 0)):
  sudoku(grid)
else:
  print("no solution found")
